package handlers

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/golang/glog"
	"github.com/stretchr/testify/assert"
	"net/url"
	"strings"
	"testing"
)

func TestDescribeHandlersJson(t *testing.T) {
	assert := assert.New(t)
	handlersJson := DescribeHandlersJson()
	var handlersDescr struct {
		Handlers []StorageHandlerDescr `json:"uri_handlers"`
	}
	err := json.Unmarshal(handlersJson, &handlersDescr)
	assert.NoError(err)
	assert.Equal(len(AvailableHandlers), len(handlersDescr.Handlers))
	for i, h := range AvailableHandlers {
		assert.Equal(h.Description(), handlersDescr.Handlers[i].Description)
		assert.Equal(h.UriScheme(), handlersDescr.Handlers[i].UriScheme)
	}
}

func TestGetHandler(t *testing.T) {
	assert := assert.New(t)
	validUris := []string{
		// todo: uncomment after handlers are implemented
		//"s3://region_url/bucket/id",
		//"S3://region_url/bucket/id",
		//"S3://id:key@region_url/bucket/id",
		//"ipfs://region_url/bucket/id",
		"/path/to/file",
	}
	invalidUris := []string{
		"://region_url/bucket/id",
	}
	for _, uriStr := range validUris {
		uri, _ := url.Parse(uriStr)
		handler, err := AvailableHandlers.Get(uriStr)
		assert.NoError(err)
		assert.Equal(strings.ToLower(uri.Scheme), handler.UriScheme())
	}
	for _, uriStr := range invalidUris {
		handler, err := AvailableHandlers.Get(uriStr)
		assert.Error(err)
		assert.Nil(handler)
	}
}
