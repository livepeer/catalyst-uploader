name: Build binaries

on:
  pull_request:
  push:
    branches:
      - "main"
      - "hjp/*"
    tags:
      - "v*"

jobs:
  build:
    name: Build binaries for ${{ matrix.platform.name }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm64
          - amd64
        platform:
          - name: linux
            os: ubuntu-20.04
          - name: darwin
            os: macos-latest
    runs-on: ${{ matrix.platform.os }}
    outputs:
      tags: ${{ steps.query-tag.outputs.tags }}
      match: ${{ steps.match-tags.outputs.match }}
    steps:
      - name: Set up go
        id: go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Export platform env
        run: |
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          echo "GOOS=${{ matrix.platform.name }}" >> $GITHUB_ENV

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # Check https://github.com/livepeer/go-livepeer/pull/1891
          # for ref value discussion
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Query Tag
        id: query-tag
        shell: bash
        run: |
          echo "::set-output name=tags::$(git describe --tag --dirty)"

      - name: Restore go package cache
        id: cache-go-mod
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ matrix.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-go-

      - name: Download dependencies
        if: steps.cache-go-mod.outputs.cache-hit != 'true'
        run: go mod download

      - name: Build
        run: |
          mkdir -p build/ releases/
          make
          cd build/
          mv catalyst-uploader livepeer-catalyst-uploader

      - uses: actions-ecosystem/action-regex-match@v2
        id: match-tag
        with:
          text: ${{ github.ref_name }}
          regex: '^(master|main|v[0-9]+\.\d+\.\d+)$'

      - name: Codesign and notarize binaries
        if: ${{ matrix.platform.name == 'darwin' && steps.match-tag.outputs.match != '' }}
        uses: livepeer/action-gh-codesign-apple@latest
        with:
          developer-certificate-id: ${{ secrets.CI_MACOS_CERTIFICATE_ID }}
          developer-certificate-base64: ${{ secrets.CI_MACOS_CERTIFICATE_BASE64 }}
          developer-certificate-password: ${{ secrets.CI_MACOS_CERTIFICATE_PASSWORD }}
          app-notarization-email: ${{ secrets.CI_MACOS_NOTARIZATION_USER }}
          app-notarization-password: ${{ secrets.CI_MACOS_NOTARIZATION_PASSWORD }}
          binary-path: "build/livepeer-catalyst-uploader"
          app-bundle-id: "org.livepeer.catalyst-uploader"

      - name: Archive binaries
        run: |
          cd build/
          tar -czvf "../releases/livepeer-catalyst-uploader-${GOOS}-${GOARCH}.tar.gz" ./livepeer-catalyst-uploader

      - name: Upload artifacts for processing further in linux
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: releases/

  upload:
    name: Upload artifacts to google bucket
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: releases/

      - name: Generate sha256 checksum and gpg signatures for release artifacts
        uses: livepeer/action-gh-checksum-and-gpg-sign@latest
        with:
          artifacts-dir: releases
          release-name: ${{ needs.build.outputs.tags }}
          gpg-key: ${{ secrets.CI_GPG_SIGNING_KEY }}
          gpg-key-passphrase: ${{ secrets.CI_GPG_SIGNING_PASSPHRASE }}

      - name: Generate branch manifest
        shell: bash
        run: |
          python --version

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: ${{ secrets.CI_GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.CI_GOOGLE_SERVICE_ACCOUNT }}

      - name: Upload release archives to Google Cloud
        id: upload-file
        uses: google-github-actions/upload-cloud-storage@v0
        with:
          path: 'releases'
          destination: 'build.livepeer.live/${{ github.event.repository.name }}/${{ needs.build.outputs.tags }}'
          parent: false
